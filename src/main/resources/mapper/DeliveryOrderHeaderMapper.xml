<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gy.spring.learn.transation.dao.DeliveryOrderHeaderDao">
    <resultMap id="ResultMap" type="DeliveryOrderHeaderInfo">
        <result property="id" column="id"/>
        <result property="platformCode" column="platform_code"/>
        <result property="code" column="code"/>
        <result property="createDate" column="create_date"/>
    </resultMap>

    <select id="selectById" parameterType="java.lang.Long" resultMap="ResultMap">
        select id,create_date,platform_code from erp_tc.delivery_order_header where id=#{id}
    </select>


    <sql id="colums">${table}.id, ${table}.create_date, ${table}.platform_code</sql>
    <sql id="fromc">
         from <include refid="${include_target}"/>
    </sql>
    <sql id="sometable">
        ${prefix}.delivery_order_header
    </sql>
    <select id="selectById1" parameterType="java.lang.Long" resultMap="ResultMap">
        select
        <include refid="colums">
           <property name="table" value="delivery_order_header"/>
        </include>
        <!--属性值可以用于包含的refid属性（例如sometable）或者包含的字句里面的属性值（如：erp_tc），-->
       <include refid="fromc">
           <property name="prefix" value="erp_tc"/>
           <property name="include_target" value="sometable"/>
       </include>
        where id=#{id}
    </select>


    <update id="updatePlatformCodeById">
        update erp_tc.delivery_order_header set platform_code=#{platformCode} where id=#{id}
    </update>

    <update id="updateCodeById">
        update erp_tc.delivery_order_header set code=#{code} where id=#{id}
    </update>

    <insert id="insertInfo" parameterType="DeliveryOrderHeaderInfo">
        insert into  erp_tc.delivery_order_header(id,platform_code, code, create_date) values(#{info.id}, #{info.platformCode},#{info.code}, now());
    </insert>

    <insert id="insertInfo1" parameterType="DeliveryOrderHeaderInfo">
        insert into  erp_tc.delivery_order_header(id,platform_code, code, create_date) values(#{id}, #{platformCode},#{code}, now());
    </insert>

    <!--注意此时用的是List，批量插入-->
    <insert id="insertLisInfo" parameterType="java.util.List">
        insert into  erp_tc.delivery_order_header(id,platform_code, code, create_date) values
        <foreach index="index" item="info" collection="infoList" separator=",">
            (#{info.id}, #{info.platformCode},#{info.code}, now())
        </foreach> ;
    </insert>

    <!--注意此时用的是List 一条一条插入,这种方式貌似不行，不能直接把foreach用于整个sql语句-->
    <insert id="insertLisInfo1" parameterType="java.util.List">
        <foreach index="index" item="info" collection="infoList" open="" close="" separator=";">
         insert into erp_tc.delivery_order_header(id,platform_code, code, create_date) values (#{info.id}, #{info.platformCode},#{info.code}, now())
        </foreach>
    </insert>

    <update id="updateInfo" parameterType="DeliveryOrderHeaderInfo">
        update  erp_tc.delivery_order_header
        <set>
            <if test="platformCode != null and platformCode !=''">
                platform_code = #{platformCode},
            </if>
            <if test="code != null and code !=''">
                code = #{code},
            </if>
        </set>
        where id=#{id}
    </update>


    <update id="updateInfo3" parameterType="DeliveryOrderHeaderInfo">
        update  erp_tc.delivery_order_header
        <set>
            <if test="info.platformCode != null and info.platformCode !=''">
                platform_code = #{info.platformCode},
            </if>
            <if test="info.code != null and info.code !=''">
                code = #{info.code},
            </if>
        </set>
        where id=#{info.id}
    </update>

    <update id="updateInfo1">
        update  erp_tc.delivery_order_header
        <set>
            <if test="info.platformCode != null and info.platformCode !=''">
                platform_code = #{info.platformCode},
            </if>
            <if test="info.code != null and info.code !=''">
                code = #{info.code},
            </if>
        </set>
        where id=#{id}
    </update>

    <update id="updateInfo2">
        update  erp_tc.delivery_order_header
        <set>
            <if test="param2.platformCode != null and param2.platformCode !=''">
                platform_code = #{param2.platformCode},
            </if>
            <if test="param2.code != null and param2.code !=''">
                code = #{param2.code},
            </if>
        </set>
        where id=#{param1}
    </update>

    <update id="updateListInfo">
        update erp_tc.delivery_order_header
        <set>
            <trim prefix="code = case" suffix="end,">
                <foreach collection="infoList" index="index" item="info">
                    <if test="info.code != null and info.code != ''">
                        when id =#{info.id} then #{info.code}
                    </if>
                </foreach>
            </trim>
            <trim prefix="platform_code = case" suffix="end,">
                <foreach collection="infoList" index="index" item="info">
                    <if test="info.platformCode != null and info.platformCode != ''">
                       when id =#{info.id} then #{info.platformCode}
                    </if>
                </foreach>
            </trim>
        </set>
        <where>
            <foreach collection="infoList" index="index" item="info" separator="or" >
                id =#{info.id}
            </foreach>
            and del=#{del}
        </where>
    </update>

    <update id="updateListInfo2">
        <foreach collection="infoList" index="index" item="info" separator=";">
            update erp_tc.delivery_order_header
                set code = #{info.code},
                platform_code = #{info.platformCode}
                where
                del =#{del}
                and id=#{info.id}
        </foreach>
    </update>

    <update id="updateListInfo3">
        <foreach collection="infoList" open="begin" close=";end;" index="index" item="info" separator=";">
            update erp_tc.delivery_order_header
            <set>
                <if test="info.code != null and info.code != '' ">
                    code = #{info.code},
                </if>
                <if test="info.platformCode != null and info.platformCode != '' ">
                    platform_code = #{info.platformCode},
                </if>
            </set>
            <where>
                del =#{del}
                and id=#{info.id}
            </where>
        </foreach>
    </update>



    <!--集合嵌套查询-->
    <!--association中的colum 关联的是主表中的Id-->
    <!--关联的嵌套结果 引用resultMap 的方式-->
    <resultMap id="statusInfo" type="DeliveryOrderStatusInfo">
        <result property="id" column="status_id"/>
        <result property="intS" column="delivery_status"/>
        <result property="status" column="e_delivery_status" javaType="gy.spring.learn.mybatismethod.entity.DeliveryStatus"/>
    </resultMap>
    <resultMap id="listAllInfo" type="DeliveryOrderHeaderInfoMy">
        <result property="id" column="header_id"/>
        <result property="code" column="code"/>
        <result property="platformCode" column="platform_code"/>
        <association property="statusInfo"  column="header_id" javaType="DeliveryOrderStatusInfo" resultMap="statusInfo"/>
    </resultMap>

    <!--关联的嵌套结果，直接嵌套resultMap的方式-->
    <resultMap id="listAllInfo1" type="DeliveryOrderHeaderInfoMy">
        <result property="id" column="header_id"/>
        <result property="code" column="code"/>
        <result property="platformCode" column="platform_code"/>
        <association property="statusInfo"  column="header_id" javaType="DeliveryOrderStatusInfo">
            <result property="id" column="status_id"/>
            <result property="intS" column="delivery_status"/>
        </association>
    </resultMap>


    <select id="listAllInfo" resultMap="listAllInfo">
        SELECT
          aa.`id` AS header_id,
          aa.`code`,
          aa.`platform_code`,
          bb.`id` AS detail_id,
          bb.pid,
          cc.id AS status_id,
          cc.`delivery_status`
        FROM
          erp_tc.`delivery_order_header` aa
          INNER JOIN erp_tc.`delivery_order_detail` bb
            ON aa.id = bb.`pid`
          INNER JOIN erp_tc.`delivery_order_status` cc
            ON aa.id = cc.id
            WHERE aa.id=#{id}
    </select>

    <select id="listAllInfo1" resultMap="listAllInfo1">
        SELECT
        aa.`id` AS header_id,
        aa.`code`,
        aa.`platform_code`,
        bb.`id` AS detail_id,
        bb.pid,
        cc.id AS status_id,
        cc.`delivery_status`
        FROM
        erp_tc.`delivery_order_header` aa
        INNER JOIN erp_tc.`delivery_order_detail` bb
        ON aa.id = bb.`pid`
        INNER JOIN erp_tc.`delivery_order_status` cc
        ON aa.id = cc.id
        WHERE aa.id=#{id}
    </select>



    <!--关联的嵌套查询-->
    <!--column	来自数据库的类名,或重命名的列标签。这和通常传递给 resultSet.getString(columnName)方法的字符串是相同的。 column 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= ” {prop1=col1,prop2=col2} ” 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。-->
    <select id="selectStatus" resultMap="statusInfo">
        select cc.id AS status_id, cc.`delivery_status`,cc.`delivery_status` as e_delivery_status from erp_tc.delivery_order_status cc where cc.id =#{id}
    </select>
    <resultMap id="listAllInfo2" type="DeliveryOrderHeaderInfoMy">
        <result property="id" column="header_id"/>
        <result property="code" column="code"/>
        <result property="platformCode" column="platform_code"/>
        <association property="statusInfo"  column="{id=header_id}" javaType="DeliveryOrderStatusInfo" select="selectStatus"/>
    </resultMap>
    <select id="listAllInfo2" resultMap="listAllInfo2">
        SELECT
        aa.`id` AS header_id,
        aa.`code`,
        aa.`platform_code`
        FROM  erp_tc.`delivery_order_header` aa
        WHERE aa.id=#{id}
    </select>

    <!--关联的集合嵌套查询-->
    <!--column	来自数据库的类名,或重命名的列标签。这和通常传递给 resultSet.getString(columnName)方法的字符串是相同的。 column 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= ” {prop1=col1,prop2=col2} ” 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。-->
    <resultMap id="detailInfo" type="DeliveryOrderDetailInfo">
        <result property="id" column="detail_id"/>
        <result property="note" column="note"/>
        <result property="pid" column="pid"/>
    </resultMap>

    <select id="selectDetail" resultMap="detailInfo">
        select bb.`id` AS detail_id,
        bb.pid,
        bb.note
        from erp_tc.delivery_order_detail bb where bb.pid =#{id}
    </select>
    <resultMap id="listAllInfo3" type="DeliveryOrderHeaderInfoMy">
        <result property="id" column="header_id"/>
        <result property="code" column="code"/>
        <result property="platformCode" column="platform_code"/>
        <association property="statusInfo"  column="{id=header_id}" javaType="DeliveryOrderStatusInfo" select="selectStatus"/>
        <collection property="list" javaType="java.util.List" column="{id=header_id}" ofType="DeliveryOrderDetailInfo" select="selectDetail"/>
    </resultMap>
    <select id="listAllInfo3" resultMap="listAllInfo3">
        SELECT
        aa.`id` AS header_id,
        aa.`code`,
        aa.`platform_code`
        FROM  erp_tc.`delivery_order_header` aa
        WHERE aa.id=#{id}
    </select>

    <update id="updateDeliveryStatus" parameterType="DeliveryOrderStatusInfo">
        update erp_tc.delivery_order_status set delivery_status =#{status} where id =#{id}
    </update>
</mapper>